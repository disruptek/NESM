image: gcc

build:compiler:
  stage: build
  cache:
    key: nim-compiler
    paths:
    - nim-devel
    - nim-master
  script:
  - |
    for BRANCH in master devel; do
    if [ ! -x nim-$BRANCH/bin/nim ]; then
      git clone -b $BRANCH --depth 1 git://github.com/nim-lang/nim nim-$BRANCH/
      cd nim-$BRANCH
      git clone --depth 1 git://github.com/nim-lang/csources csources/
      cd csources
      sh build.sh
      cd ..
      rm -rf csources
      bin/nim c koch
      ./koch boot -d:release
      ./koch nimble
    else
      cd nim-$BRANCH
      git fetch origin
      if ! git merge FETCH_HEAD | grep "Already up-to-date"; then
        bin/nim c koch
        ./koch boot -d:release
        ./koch nimble
      fi
    fi
    cd ..
    done

test:devel:
  stage: test
  cache:
    key: nim-compiler
    policy: pull
    paths:
    - nim-devel
  script:
  - |
    export PATH="nim-devel/bin{PATH:+:$PATH}
    nimble -v
    nim -v
    nimble tests
  allow_failure: true
  except:
  - gh-pages

test:master:
  stage: test
  cache:
    key: nim-compiler
    policy: pull
    paths:
    - nim-master
  script:
  - export PATH="nim-master/bin{PATH:+:$PATH}
  - nimble -v
  - nim -v
  - nimble tests
  except:
  - gh-pages

pages:
  stage: deploy
  cache:
    key: nim-compiler
    policy: pull
    paths:
    - nim-master
  script:
  - export PATH="nim-master/bin{PATH:+:$PATH}
  - mkdir -p public
  - nimble docs
  - cp index.html public/index.html
  artifacts:
    paths:
    - public
  only:
  - master
